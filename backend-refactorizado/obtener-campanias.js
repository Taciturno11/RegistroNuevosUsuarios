const sql = require('mssql');
require('dotenv').config();

// Configuraci√≥n de la base de datos
const dbConfig = {
  server: process.env.SQL_SERVER || '127.0.0.1',
  database: process.env.SQL_DATABASE || 'Partner',
  user: process.env.SQL_USER || 'tu_usuario',
  password: process.env.SQL_PASSWORD || 'tu_password',
  port: parseInt(process.env.SQL_PORT || '1433'),
  options: {
    encrypt: false,
    trustServerCertificate: true,
    enableArithAbort: true,
    requestTimeout: 30000,
    connectionTimeout: 30000
  }
};

async function obtenerTodasLasCampanias() {
  let pool;
  
  try {
    console.log('üîç Conectando a la base de datos...');
    pool = await sql.connect(dbConfig);
    console.log('‚úÖ Conexi√≥n establecida');

    // Consulta 1: Todas las campa√±as en PRI.Campanias
    console.log('\nüìä CONSULTA 1: Todas las campa√±as en PRI.Campanias');
    const todasCampanias = await pool.request().query(`
      SELECT Campa√±aID, NombreCampa√±a 
      FROM PRI.Campanias 
      ORDER BY NombreCampa√±a
    `);
    
    console.log('üìã Resultado:');
    todasCampanias.recordset.forEach((camp, index) => {
      console.log(`  ${index + 1}. ID: ${camp.Campa√±aID} - ${camp.NombreCampa√±a}`);
    });

    // Consulta 2: Campa√±as que aparecen en empleados activos/cesados
    console.log('\nüìä CONSULTA 2: Campa√±as en empleados (Activos/Cesados)');
    const campaniasEnEmpleados = await pool.request().query(`
      SELECT DISTINCT c.NombreCampa√±a
      FROM PRI.Campanias c
      INNER JOIN PRI.Empleados e ON c.Campa√±aID = e.Campa√±aID
      WHERE e.EstadoEmpleado IN ('Activo', 'Cese')
      ORDER BY c.NombreCampa√±a
    `);
    
    console.log('üìã Resultado:');
    campaniasEnEmpleados.recordset.forEach((camp, index) => {
      console.log(`  ${index + 1}. ${camp.NombreCampa√±a}`);
    });

    // Consulta 3: Campa√±as que aparecen en capacitaciones
    console.log('\nüìä CONSULTA 3: Campa√±as en capacitaciones');
    const campaniasEnCapacitaciones = await pool.request().query(`
      SELECT DISTINCT c.NombreCampa√±a
      FROM PRI.Campanias c
      INNER JOIN Postulantes_En_Formacion pf ON c.Campa√±aID = pf.Campa√±aID
      ORDER BY c.NombreCampa√±a
    `);
    
    console.log('üìã Resultado:');
    campaniasEnCapacitaciones.recordset.forEach((camp, index) => {
      console.log(`  ${index + 1}. ${camp.NombreCampa√±a}`);
    });

    // An√°lisis de clasificaci√≥n
    console.log('\nüéØ AN√ÅLISIS DE CLASIFICACI√ìN POR √ÅREAS');
    console.log('=====================================');
    
    const areasCampa√±as = {
      'OUTBOUND': [
        'MIGRACION',
        'PORTABILIDAD PREPAGO', 
        'RENOVACION',
        'HOGAR',
        'REGULARIZACION',
        'PORTABILIDAD POSPAGO',
        'PREPAGO DIGITAL'
      ],
      'INBOUND': [
        'UNIFICADO',
        'AUDITORIA',
        'CROSSELLING',
        'BACK SEGUIMIENTO',
        'REDES SOCIALES'
      ],
      'STAFF': [
        'ESTRUCTURA',
        'CALIDAD',
        'CAPACITACION',
        'ANALISTAS'
      ]
    };

    const todasLasCampaniasNombres = todasCampanias.recordset.map(c => c.NombreCampa√±a.toUpperCase());
    
    console.log('\nüìä CLASIFICACI√ìN DE CAMPA√ëAS:');
    
    Object.entries(areasCampa√±as).forEach(([area, campa√±as]) => {
      console.log(`\nüîµ ${area}:`);
      campa√±as.forEach(campa√±a => {
        const existe = todasLasCampaniasNombres.includes(campa√±a);
        console.log(`  ${existe ? '‚úÖ' : '‚ùå'} ${campa√±a} ${existe ? '(EXISTE)' : '(NO EXISTE)'}`);
      });
    });

    // Campa√±as que est√°n en "OTROS"
    console.log('\n‚ùì CAMPA√ëAS EN "OTROS":');
    const campa√±asClasificadas = Object.values(areasCampa√±as).flat();
    const campa√±asOtros = todasLasCampaniasNombres.filter(campa√±a => 
      !campa√±asClasificadas.includes(campa√±a)
    );
    
    if (campa√±asOtros.length > 0) {
      campa√±asOtros.forEach((campa√±a, index) => {
        console.log(`  ${index + 1}. ${campa√±a}`);
      });
    } else {
      console.log('  ‚úÖ No hay campa√±as en "OTROS" - todas est√°n clasificadas');
    }

    // Resumen
    console.log('\nüìà RESUMEN:');
    console.log(`  Total campa√±as en BD: ${todasCampanias.recordset.length}`);
    console.log(`  Campa√±as en empleados: ${campaniasEnEmpleados.recordset.length}`);
    console.log(`  Campa√±as en capacitaciones: ${campaniasEnCapacitaciones.recordset.length}`);
    console.log(`  Campa√±as en "OTROS": ${campa√±asOtros.length}`);

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    if (pool) {
      await pool.close();
      console.log('\n‚úÖ Conexi√≥n cerrada');
    }
  }
}

// Ejecutar el script
obtenerTodasLasCampanias();
