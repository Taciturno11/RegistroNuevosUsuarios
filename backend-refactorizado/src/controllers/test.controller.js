const { getConnection, executeQuery } = require('../config/database');

// Controlador de prueba para verificar conexi√≥n a base de datos
exports.testConnection = async (req, res) => {
  try {
    console.log('üß™ Probando conexi√≥n a base de datos...');
    
    // Obtener conexi√≥n
    const connection = await getConnection();
    console.log('‚úÖ Conexi√≥n obtenida exitosamente');
    
    // Ejecutar consulta simple
    const result = await executeQuery('SELECT 1 as test, GETDATE() as fecha_actual');
    console.log('‚úÖ Consulta de prueba ejecutada exitosamente');
    
    res.json({
      success: true,
      message: 'Conexi√≥n a base de datos exitosa',
      data: {
        connection: 'OK',
        query_result: result.recordset[0],
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error en prueba de conexi√≥n:', error);
    res.status(500).json({
      success: false,
      message: 'Error en prueba de conexi√≥n',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// Controlador para probar consulta a tabla de empleados
exports.testEmpleadosTable = async (req, res) => {
  try {
    console.log('üß™ Probando consulta a tabla de empleados...');
    
    // Consulta simple a la tabla de empleados
    const result = await executeQuery('SELECT TOP 1 DNI, Nombres, ApellidoPaterno FROM PRI.Empleados');
    console.log('‚úÖ Consulta a empleados ejecutada exitosamente');
    
    res.json({
      success: true,
      message: 'Consulta a tabla empleados exitosa',
      data: {
        empleado_ejemplo: result.recordset[0] || 'No hay empleados en la tabla',
        total_registros: result.recordset.length,
        timestamp: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error consultando tabla empleados:', error);
    res.status(500).json({
      success: false,
      message: 'Error consultando tabla empleados',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

// Controlador para obtener informaci√≥n de la base de datos
exports.getDatabaseInfo = async (req, res) => {
  try {
    console.log('üß™ Obteniendo informaci√≥n de la base de datos...');
    
    // Obtener informaci√≥n de la base de datos
    const result = await executeQuery(`
      SELECT 
        DB_NAME() as database_name,
        @@VERSION as sql_server_version,
        GETDATE() as current_time
    `);
    
    console.log('‚úÖ Informaci√≥n de BD obtenida exitosamente');
    
    res.json({
      success: true,
      message: 'Informaci√≥n de base de datos obtenida',
      data: result.recordset[0],
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n de BD:', error);
    res.status(500).json({
      success: false,
      message: 'Error obteniendo informaci√≥n de BD',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};
